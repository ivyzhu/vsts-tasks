{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[More Information](https://go.microsoft.com/fwlink/?LinkID=613720)",
  "loc.description": "使用 Gradle 包装器脚本生成",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.group.displayName.junitTestResults": "JUnit 测试结果",
  "loc.group.displayName.codeCoverage": "代码覆盖率",
  "loc.group.displayName.advanced": "高级",
  "loc.group.displayName.CodeAnalysis": "代码分析",
  "loc.input.label.wrapperScript": "Gradle Wrapper",
  "loc.input.help.wrapperScript": "从存储库根路径到“Gradle 包装器脚本”的相对路径。",
  "loc.input.label.options": "选项",
  "loc.input.label.tasks": "任务",
  "loc.input.label.cwd": "工作目录",
  "loc.input.help.cwd": "要在其中运行 Gradle 生成的工作目录。若未指定，则使用存储库根路径。",
  "loc.input.label.publishJUnitResults": "发布到 TFS/Team Services",
  "loc.input.help.publishJUnitResults": "选择此选项可将 Gradle 生成产生的 JUnit 测试结果发布到 TFS/Team Services。每个与“测试结果文件”匹配的测试结果文件都会在 TFS/Team Services 中发布为测试运行。",
  "loc.input.label.testResultsFiles": "测试结果文件",
  "loc.input.help.testResultsFiles": "测试结果文件路径。可以使用通配符。例如，\"**/TEST-*.xml\" 表示名称以 TEST- 开头的所有 XML 文件。",
  "loc.input.label.testRunTitle": "测试运行标题",
  "loc.input.help.testRunTitle": "为测试运行提供一个名称。",
  "loc.input.label.codeCoverageTool": "Code Coverage Tool",
  "loc.input.help.codeCoverageTool": "选择代码覆盖率工具。",
  "loc.input.label.classFilesDirectories": "类文件目录",
  "loc.input.help.classFilesDirectories": "包含类文件和存档文件(JAR 和 WAR 等)的目录列表，以逗号分隔。报告这些目录中类文件的代码覆盖率。通常情况下，在 \"build/classes/main\" 下搜索类，这是 Gradle 生成的默认类目录",
  "loc.input.label.classFilter": "类包含/排除筛选器",
  "loc.input.help.classFilter": "用于在收集代码覆盖率时包含或排除类的筛选器列表，以逗号分隔。例如: +:com.*、+:org.*、-:my.app*.*。",
  "loc.input.label.javaHomeSelection": "JAVA_HOME 设置方法",
  "loc.input.help.javaHomeSelection": "可通过选择将在生成期间发现的 JDK 版本或手动输入 JDK 路径来设置 JAVA_HOME。",
  "loc.input.label.jdkVersion": "JDK 版本",
  "loc.input.help.jdkVersion": "将尝试发现所选 JDK 版本的路径并相应地设置 JAVA_HOME。",
  "loc.input.label.jdkUserInputPath": "JDK 路径",
  "loc.input.help.jdkUserInputPath": "将 JAVA_HOME 设置到给定路径。",
  "loc.input.label.jdkArchitecture": "JDK 体系结构",
  "loc.input.help.jdkArchitecture": "可以选择提供 JDK 的体系结构(x86、x64)。",
  "loc.input.label.sqAnalysisEnabled": "Run SonarQube Analysis",
  "loc.input.help.sqAnalysisEnabled": "在执行当前目标后运行 [SonarQube analysis](https://go.microsoft.com/fwlink/?LinkID=708598)。应首先执行“安装”或“打包”目标。",
  "loc.input.label.sqConnectedServiceName": "SonarQube Endpoint",
  "loc.input.help.sqConnectedServiceName": "The endpoint that specifies the SonarQube server to use",
  "loc.input.label.sqProjectName": "SonarQube 项目名称",
  "loc.input.help.sqProjectName": "SonarQube 项目名，即 sonar.ProjectName。",
  "loc.input.label.sqProjectKey": "SonarQube 项目键",
  "loc.input.help.sqProjectKey": "SonarQube 项目的唯一键，即 sonar.projectKey。",
  "loc.input.label.sqProjectVersion": "SonarQube 项目版本",
  "loc.input.help.sqProjectVersion": "SonarQube 项目版本，即 sonar.projectVersion。",
  "loc.input.label.sqDbDetailsRequired": "The SonarQube server version is lower than 5.2",
  "loc.input.help.sqDbDetailsRequired": "如果使用 SonarQube 服务器 5.1 或更低版本，则必须指定数据库连接详细信息。",
  "loc.input.label.sqDbUrl": "Db Connection String",
  "loc.input.help.sqDbUrl": "仅适用于 SonarQube 服务器 5.1 及更低版本。输入数据库连接设置(即 sonar.jdbc.url)。例如: jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor",
  "loc.input.label.sqDbUsername": "Db 用户名",
  "loc.input.help.sqDbUsername": "仅适用于 SonarQube 服务器 5.1 及更低版本。输入数据库用户的用户名(即 sonar.jdbc.username)。",
  "loc.input.label.sqDbPassword": "Db User Password",
  "loc.input.help.sqDbPassword": "仅适用于 SonarQube 服务器 5.1 及更低版本。输入数据库用户的密码，即 sonar.jdbc.password",
  "loc.input.label.sqAnalysisWaitForAnalysis": "Wait for SonarQube analysis and add quality gate details",
  "loc.input.help.sqAnalysisWaitForAnalysis": "Wait for the SonarQube server to finish analysing the build, then add quality gate details to the SonarQube build summary.",
  "loc.input.label.pmdAnalysisEnabled": "Run PMD Analysis",
  "loc.input.help.pmdAnalysisEnabled": "Use the PMD Java static analysis tool to look for bugs in the code.",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "未能创建 TaskReport 对象。缺少字段: {0}",
  "loc.messages.sqCommon_WaitingForAnalysis": "Waiting for the SonarQube server to analyse the build.",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "Build not configured to wait for the SonarQube analysis. Detailed quality gate status will not be available.",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "Could not detect the quality gate status or a new status has been introduced.",
  "loc.messages.sqCommon_InvalidResponseFromServer": "Server responded with an invalid or unexpected response format.",
  "loc.messages.codeAnalysis_ToolIsEnabled": "%s 分析已启用。",
  "loc.messages.codeAnalysis_ToolFailed": "%s 分析失败。",
  "loc.messages.sqAnalysis_IncrementalMode": "检测到 PR 生成 - 在增量模式下运行 SonarQube 分析",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "SonarQube 分析报表",
  "loc.messages.sqAnalysis_BuildSummaryNotAvailableInPrBuild": "详细的 SonarQube 报表不可用于拉取请求生成。",
  "loc.messages.sqAnalysis_TaskReportInvalid": "任务报表无效或丢失。请检查 SonarQube 是否成功完成。",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "详细的 SonarQube 报表",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "Cannot authenticate to the SonarQube server. Check the saved endpoint details and the status of the server.",
  "loc.messages.sqAnalysis_AnalysisTimeout": "The analysis did not complete in the allotted time of {0} seconds.",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s found %d violations in %d files.",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s found %d violations in 1 file.",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s found 1 violation in 1 file.",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s found no violations.",
  "loc.messages.codeAnalysisBuildSummaryTitle": "Code Analysis Report",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "Code Analysis Results"
}